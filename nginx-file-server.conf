# NGINX Configuration for High-Performance File Server
# Optimized for fast uploads and large files

# Global worker configuration
worker_processes auto;
worker_connections 1024;

# Event handling optimization
events {
    worker_connections 1024;
    use epoll;  # Use epoll on Linux for better performance
    multi_accept on;
}

http {
    # Basic MIME type configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Performance optimization settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # Connection and performance settings
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types 
        text/plain 
        text/css 
        text/xml 
        text/javascript 
        application/json 
        application/javascript 
        application/xml+rss 
        application/atom+xml 
        image/svg+xml;

    server {
        listen 80;
        server_name your-server.com;  # Replace with your domain or IP

        # ‚ö° ULTRA-OPTIMIZED UPLOAD SETTINGS ‚ö°
        
        # Maximum file size (increase as needed)
        client_max_body_size 10G;
        
        # Timeout settings - optimized for large files
        client_body_timeout 3600s;     # 1 hour for very large files
        client_header_timeout 60s;
        send_timeout 3600s;
        
        # Buffer settings - CRITICAL for upload speed
        client_body_buffer_size 1M;    # Increased from default 8k/16k
        client_header_buffer_size 4k;
        large_client_header_buffers 8 64k;
        
        # File upload optimization - GAME CHANGER
        client_body_in_file_only clean;          # Always write to temp file
        client_body_temp_path /tmp/nginx_uploads 1 2;  # Multi-level temp directory
        
        # Proxy buffer settings for better performance
        proxy_buffering off;
        proxy_request_buffering off;
        
        # Connection optimization
        reset_timedout_connection on;
        
        # Disable access log for uploads (performance boost)
        access_log off;
        
        # Error log only for errors
        error_log /var/log/nginx/file-server-error.log error;

        # üöÄ UPLOAD ENDPOINT - MAXIMUM PERFORMANCE
        location /uploads/ {
            root /var/www/files;

            # WebDAV configuration for uploads
            dav_methods PUT DELETE MKCOL COPY MOVE;
            dav_ext_methods PROPFIND OPTIONS;
            dav_access user:rw group:rw all:r;
            create_full_put_path on;

            # Override global settings for even better upload performance
            client_max_body_size 10G;
            client_body_timeout 3600s;
            client_body_buffer_size 2M;        # Even larger buffer for uploads
            client_body_temp_path /tmp/nginx_uploads_fast 1 2;
            
            # Critical upload optimizations
            client_body_in_file_only clean;    # Always stream to disk
            client_body_in_single_buffer off;  # Don't try to fit in memory
            
            # Disable unnecessary features during upload
            access_log off;
            
            # CORS headers - streamlined
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Content-Length" always;
            add_header Access-Control-Max-Age 86400 always;

            # Handle preflight requests efficiently
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization, Content-Length" always;
                add_header Access-Control-Max-Age 86400 always;
                add_header Content-Length 0;
                return 204;
            }

            # Enable directory listing for API access
            autoindex on;
            autoindex_exact_size off;
            autoindex_format html;
            autoindex_localtime on;
        }

        # üìÅ DOWNLOAD ENDPOINT - OPTIMIZED FOR SPEED
        location /files/ {
            alias /var/www/files/uploads/;

            # Enable directory listing
            autoindex on;
            autoindex_exact_size off;
            autoindex_format html;
            autoindex_localtime on;

            # Download optimization
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            
            # CORS headers for file access
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;

            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept" always;
                add_header Content-Length 0;
                return 204;
            }

            # Security headers
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options DENY always;
            add_header X-XSS-Protection "1; mode=block" always;

            # Optimized caching for static files
            expires 1d;
            add_header Cache-Control "public, immutable" always;
            
            # Enable efficient file serving
            try_files $uri $uri/ =404;
        }

        # üè• HEALTH CHECK ENDPOINTS
        location / {
            return 200 "NGINX High-Performance File Server is running - Upload optimized";
            add_header Content-Type text/plain always;
            access_log off;
        }

        location /health {
            return 200 "OK";
            add_header Content-Type text/plain always;
            access_log off;
        }
        
        # üìä PERFORMANCE STATUS ENDPOINT
        location /status {
            return 200 "Server Status: Optimized for 10GB uploads with 2MB buffers";
            add_header Content-Type text/plain always;
            access_log off;
        }
    }
}